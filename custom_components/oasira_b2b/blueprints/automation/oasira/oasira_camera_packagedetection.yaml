blueprint:
  name: Camera Package Detection with AI
  description:
    This automation blueprint converts a non-package detecting camera to a package detecting one using AI. It uses the
    camera motion trigger to analyze the snapshot for a package in the image and allows taking actions based on the results.
  domain: automation
  author: Oasira Business
  input:
    sensor:
      name: Camera Motion Binary Sensor
      description: The sensor wich triggers the package detection
      selector:
        entity:
          domain:
            - binary_sensor
          multiple: false
    camera:
      name: Camera
      description: The camera which creates the snapshot
      selector:
        entity:
          domain:
            - camera
          multiple: false
    person_input:
      name: Person
      description: The person (or people) to notify
      selector:
        entity:
          multiple: true
          filter:
            domain: person

    notification_title:
      name: Notification title
      description: 'Default: "package detected!"'
      default: package detected!

    notification_message:
      name: Notification message
      description:
        'Default: "{{ sensor_name }} detected a package! Snapshot from {{
        camera_name }} at {{ time }}."'
      default:
        "{{ sensor_name }} detected a package! Snapshot from {{ camera_name
        }} at {{ time }}."

    data_clickaction_url:
      name: URL to Navigate (Optional)
      description:
        The URL to navigate to when clicking on the notification. (default
        = /lovelace)
      default: /lovelace

    additional_actions:
      name: Additional Actions
      description: Add additional actions to execute (Optional)
        else.
      default: []
      selector:
        action: {}

trigger:
  - platform: state
    entity_id: !input sensor
    to: "on"

variables:
  sensor: !input sensor
  sensor_name: "{{ states[sensor].attributes.friendly_name }}"
  camera: !input camera
  camera_name: "{{ states[camera].attributes.friendly_name }}"
  time: "{{ now().strftime('%H:%M') }}"
  date: "{{ now().strftime('%Y-%m-%d') }}"
  notification_title: !input notification_title
  notification_message: !input notification_message
  snapshot_create_file_path: "/media/snapshots/{{ camera_name }}/{{ now().strftime('%Y%m%d-%H%M%S') }}.jpg"
  # File path for notifications (served via /media/local/)
  snapshot_access_file_path: "{{ snapshot_create_file_path | replace('/media','/media/local') }}"
  # Media source ID for AI task (convert path to media-source://)
  snapshot_media_source: "{{ snapshot_create_file_path | replace('/media','media-source://media_source/local') }}"
  clickActionURL: !input data_clickaction_url
  additional_actions: !input additional_actions

action:
  - service: camera.snapshot
    entity_id: !input camera
    data:
      filename: "{{ snapshot_create_file_path }}"

  - alias: Send image to AI
    action: ai_task.generate_data
    data:
      task_name: process
      instructions: "Is there at least one one cardboard or plastic delivered package shown in this image?"
      entity_id: ai_task.oasira_b2b_ai_task
      attachments:
        media_content_id: "{{ snapshot_media_source }}"
        media_content_type: image/jpeg
        metadata:
          title: "{{ snapshot_create_file_path }}"
          thumbnail: "{{ snapshot_access_file_path }}"
          media_class: image
    response_variable: responsevar

  - condition: template
    value_template: "{{ 'Yes' in responsevar.data}}"

  - condition: state
    entity_id: binary_sensor.motion_notification_sensor
    state: "on"

  - service: oasira_b2b.notify_person_service
    data:
      target: !input person_input
      title: !input notification_title
      message: "{{ notification_message}} {{responsevar.data}}"
      data:
        image: "{{ snapshot_access_file_path }}"
        clickAction: !input data_clickaction_url
        ttl: 0
        priority: high
        attachment:
          url: "{{ snapshot_access_file_path }}"
          content_type: JPEG
        url: !input data_clickaction_url
        actions:
          - action: SNOOZEMOTIONNOTIFY
            title: Snooze Motion Notifications

  - choose: []
    default: !input additional_actions
mode: parallel
